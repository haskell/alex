cabal-version: >= 1.10
name: alex
version: 3.2.6
-- don't forget updating changelog.md!
license: BSD3
license-file: LICENSE
copyright: (c) Chis Dornan, Simon Marlow
author: Chris Dornan and Simon Marlow
maintainer: Simon Marlow <marlowsd@gmail.com>
bug-reports: https://github.com/simonmar/alex/issues
stability: stable
homepage: http://www.haskell.org/alex/
synopsis: Alex is a tool for generating lexical analysers in Haskell
description:
  Alex is a tool for generating lexical analysers in Haskell.
  It takes a description of tokens based on regular
  expressions and generates a Haskell module containing code
  for scanning text efficiently. It is similar to the tool
  lex or flex for C/C++.

category: Development
build-type: Simple

-- Keep the contents of `tested-with` in sync with `env` in `.travis.yml`.
tested-with:
        GHC == 7.0.4
        GHC == 7.4.2
        GHC == 7.6.3
        GHC == 7.8.4
        GHC == 7.10.3
        GHC == 8.0.2
        GHC == 8.2.2
        GHC == 8.4.4
        GHC == 8.6.5
        GHC == 8.8.3
        GHC == 8.10.1

data-dir: data/

data-files:
        AlexTemplate
        AlexTemplate-debug
        AlexTemplate-nopred
        AlexTemplate-nopred-debug
        AlexTemplate-latin1
        AlexTemplate-latin1-debug
        AlexTemplate-latin1-nopred
        AlexTemplate-latin1-nopred-debug
        AlexTemplate-ghc
        AlexTemplate-ghc-debug
        AlexTemplate-ghc-nopred
        AlexTemplate-ghc-nopred-debug
        AlexTemplate-ghc-latin1
        AlexTemplate-ghc-latin1-debug
        AlexTemplate-ghc-latin1-nopred
        AlexTemplate-ghc-latin1-nopred-debug
        AlexWrapper-basic
        AlexWrapper-basic-bytestring
        AlexWrapper-strict-bytestring
        AlexWrapper-posn
        AlexWrapper-posn-bytestring
        AlexWrapper-monad
        AlexWrapper-monad-bytestring
        AlexWrapper-monadUserState
        AlexWrapper-monadUserState-bytestring
        AlexWrapper-gscan

extra-source-files:
        CHANGELOG.md
        README.md
        TODO
        alex.spec
        doc/Makefile
        doc/aclocal.m4
        doc/alex.1.in
        doc/alex.xml
        doc/config.mk.in
        doc/configure.ac
        doc/docbook-xml.mk
        doc/fptools.css
        examples/Makefile
        examples/Tokens.x
        examples/Tokens_gscan.x
        examples/Tokens_posn.x
        examples/examples.x
        examples/haskell.x
        examples/lit.x
        examples/pp.x
        examples/state.x
        examples/tiny.y
        examples/words.x
        examples/words_monad.x
        examples/words_posn.x
        src/ghc_hooks.c
        templates/GenericTemplate.hs
        templates/wrappers.hs
        tests/Makefile
        tests/simple.x
        tests/null.x
        tests/tokens.x
        tests/tokens_gscan.x
        tests/tokens_posn.x
        tests/tokens_bytestring.x
        tests/tokens_posn_bytestring.x
        tests/tokens_scan_user.x
        tests/tokens_strict_bytestring.x
        tests/tokens_monad_bytestring.x
        tests/tokens_monadUserState_bytestring.x
        tests/tokens_bytestring_unicode.x
        tests/basic_typeclass.x
        tests/basic_typeclass_bytestring.x
        tests/default_typeclass.x
        tests/gscan_typeclass.x
        tests/posn_typeclass.x
        tests/monad_typeclass.x
        tests/monad_typeclass_bytestring.x
        tests/monadUserState_typeclass.x
        tests/monadUserState_typeclass_bytestring.x
        tests/posn_typeclass_bytestring.x
        tests/strict_typeclass.x
        tests/unicode.x
        tests/issue_71.x
        tests/issue_119.x
        tests/issue_141.x

flag bootstrap
  description: Optimize the implementation of happy using a pre-built alex
  manual: True
  default: False

source-repository head
    type:     git
    location: https://github.com/simonmar/alex.git

executable alex
  hs-source-dirs: src
  main-is: Main.hs

  build-depends: base >= 2.1 && < 5
               , array
               , containers
               , directory
               -- min bounds for Except and ExceptT
               , transformers >=0.4 && <0.6
               , mtl >= 2.2.1

  build-tools: happy

  default-language: Haskell98
  default-extensions: CPP
  other-extensions: MagicHash

  ghc-options: -Wall -rtsopts

  other-modules:
        AbsSyn
        CharSet
        DFA
        DFAMin
        DFS
        Info
        Map
        NFA
        Output
        Paths_alex
        Parser
        ParseMonad
        ParseMonad.Class
        Scan
        Set
        Sort
        Token
        Util
        UTF8
        Data.Ranged
        Data.Ranged.Boundaries
        Data.Ranged.RangedSet
        Data.Ranged.Ranges

  if flag(bootstrap)
    -- TODO put this back when Cabal can use it's qualified goals to better
    -- understand bootstrapping, see
    -- https://github.com/haskell/cabal/issues/7189
    --build-tools: alex
    cpp-options: -DALEX_BOOTSTRAP
    other-modules:
      ParseMonad.Bootstrapped
      Scan.Bootstrapped
  else
    other-modules:
      ParseMonad.Oracle
      Scan.Oracle

test-suite tests
  type: exitcode-stdio-1.0
  main-is: test.hs
  -- This line is important as it ensures that the local `exe:alex` component declared above is built before the test-suite component is invoked, as well as making sure that `alex` is made available on $PATH and `$alex_datadir` is set accordingly before invoking `test.hs`
  build-tools: alex

  default-language: Haskell98

  build-depends: base, process
